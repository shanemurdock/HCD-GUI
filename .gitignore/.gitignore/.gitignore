/**
 Shane Murdock 2899741 Assignment1

* This application allows the user to convert from imperial units to metric units
 * Conversion factors are stored inn a LinkedHashMap
 * There is error checking to ensure that suitable values are entered. 
 */

// imports
import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.control.Button;
import javafx.scene.control.Slider;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.control.Toggle;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.input.KeyEvent;
import java.util.*;

// class definition
public class Assignment1 extends Application {

	// init method
	public void init() {
		//initialize variables
		
		//initialize Buttons
		reset_button = new Button("Reset");
		convert_button = new Button("Convert");
		//initialize GridPane
		gridPane = new GridPane();
		//initialize Labels
		conversion_type_label = new Label("Conversion Type");
		imperial_label = new Label("Imperial");
		accuracy_label = new Label("Accuracy");
		metric_label = new Label("Metric");
		
		//initialize RadioButtons
		imperial_radioButton_1 = new RadioButton("in");
		imperial_radioButton_2 = new RadioButton("foot");
		imperial_radioButton_3 = new RadioButton("yard");
		imperial_toggleGroup = new ToggleGroup();
		
		metric_radioButton_1 = new RadioButton("mm");
		metric_radioButton_2 = new RadioButton("cm");
		metric_radioButton_3 = new RadioButton("m");
		metric_toggleGroup = new ToggleGroup();
		//initialize textFields
		imperial_textField = new TextField();
		metric_textField = new TextField();
		accuracy_textField = new TextField();
		//initialize slider
		accuracy_slider = new Slider();
		accuracy_slider = new Slider();
		//accuracy_slider.setSnapToTicks(true); //this snapped to whole numbers for the slider
		// Conversion Type - ComboBox
		conversion_type_comboBox = new ComboBox <String>();
		conversion_type_comboBox.getItems().addAll("Length", "Mass");
		conversion_type_comboBox.setValue("Length");
		// Prevent the Accuracy and Metric TextFields being editable  
		accuracy_textField.setEditable(false);
		metric_textField.setEditable(false);
		// Set radio buttons to toggle groups
		imperial_radioButton_1.setToggleGroup(imperial_toggleGroup);
		imperial_radioButton_2.setToggleGroup(imperial_toggleGroup);
		imperial_radioButton_3.setToggleGroup(imperial_toggleGroup);

		metric_radioButton_1.setToggleGroup(metric_toggleGroup);
		metric_radioButton_2.setToggleGroup(metric_toggleGroup);
		metric_radioButton_3.setToggleGroup(metric_toggleGroup);

		// Layout controls as per the diagram, feel free to improve the UI. 
		// How many rows and columns do you want - work this out on paper first 
		// My version has 5 rows and 8 columns you can look at the JavaFX API to 
		// see how to get controls to span more than one column
		
		//column 0 elements
		gridPane.add(conversion_type_label,1,1); 
		gridPane.add(imperial_label,1,2);
		gridPane.add(accuracy_label,1,4);
		gridPane.add(convert_button,1,5);
		//column 1 elements
		gridPane.add(conversion_type_comboBox,2,1,2,1); 
		gridPane.add(imperial_textField,2,2,3,1);
		gridPane.add(imperial_radioButton_1,2,3);
		gridPane.add(accuracy_slider,2,4,3,1);
		gridPane.add(reset_button,2,5,3,1);
		//column 2 elements
		gridPane.add(imperial_radioButton_2,3,3); 
		//column 3 elements
		gridPane.add(imperial_radioButton_3,4,3); 
		//column 4 elements
		gridPane.add(metric_label,5,2); 
		//column 5 elements
		gridPane.add(metric_textField,6,2,3,1); 
		gridPane.add(metric_radioButton_1,6,3);
		gridPane.add(accuracy_textField,6,4,3,1);
		//column 6 elements
		gridPane.add(metric_radioButton_2,7,3); 
		//column 7 elements
		gridPane.add(metric_radioButton_3,8,3); 
		//column 8 elements

		// Method call (not declaration!)  to initialize the controls based on the conversion type.
		initializeControlValues();	
		// Method call to perform conversion
		convert();	
		//  Listener for accuracy_slider to set the number of decimal places in the metric_textField 
		accuracy_slider.valueProperty().addListener(new ChangeListener<Number>(){
			public void changed(final ObservableValue<? extends Number> observable, final Number oldValue, final Number newValue){
				convert();
				accuracy_textField.setText(""+ newValue);
				
			}
		});
		// Listener for imperial_toggleGroup to perform conversion 
		this.imperial_toggleGroup.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
			public void changed(ObservableValue<? extends Toggle> ov, Toggle toggle,Toggle new_toggle) {
				convert();
			}
		});	
		// Listener for metric_toggleGroup to perform conversion 
		this.metric_toggleGroup.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
			public void changed(ObservableValue<? extends Toggle> ov, Toggle toggle,Toggle new_toggle) {
				convert();
			}	
		});
		// Listener for convert_button to perform conversion  
		convert_button.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				convert();
			}
		});
		// Listener for conversion_type_combobox to initialize control values and perform conversion
		conversion_type_comboBox.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				initializeControlValues();
			}
		});
		// Listener for reset_button to initialize control values and perform conversion
		reset_button.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent event) {
				initializeControlValues();
				convert();
				
			}
		});
		imperial_textField.focusedProperty().addListener(new ChangeListener<Boolean>(){
			public void changed(final ObservableValue<? extends Boolean>arg0, final Boolean oldPropertyValue, final Boolean newPropertyValue){

				if(newPropertyValue)
				imperial_textField.clear();
				metric_textField.clear();
			    }
			});
	}
	// Overridden start method
	public void start(Stage primaryStage) {
		// set a title on the window, set a scene, size, and show the window
		//create the Scene and set the Stage / set the spacing between elements in the GridPane h/v
		primaryStage.setTitle("Unit Converter");
		primaryStage.setScene(new Scene(gridPane, 550, 200));
		gridPane.setHgap(10);
		gridPane.setVgap(6);
		primaryStage.show();
	}
	// Overridden stop method - add a status message to this 
	public void stop() {
	}
	// Entry point to our program
	public static void main(String[] args) {
		launch(args);
	}
    // Method to harvest value from imperial_textField, perform calculation and display the results
	// in the metric_textField 
	private void convert(){
		Double value_imperial = 0.0;
		Double value_metric;
		// try/catch to test to see if the value in the imperial_textField is a number before attempting to convert 
		try{	
			Double.parseDouble(imperial_textField.getText());
		} 
		catch (NumberFormatException e) {
			// Output a suitable error message in the imperial_textField and set the metric_textField to blank
			imperial_textField.setText("Enter a Vaild Number :");
			metric_textField.setText(" ");
			return;
		}
		value_imperial = Double.parseDouble(imperial_textField.getText());
		// Get the select keys from the RadioButtons
		String key_imperial = ((RadioButton)this.imperial_toggleGroup.getSelectedToggle()).getText();
		String key_metric = ((RadioButton)this.metric_toggleGroup.getSelectedToggle()).getText();
		// Use these keys to get the matching values from the LinkedHashMap
		Double converstion_factor_imperial = this.conversion_map.get(key_imperial);
		Double converstion_factor_metric = this.conversion_map.get(key_metric);
		// Calculate the value_metric
		value_metric = value_imperial * converstion_factor_metric* converstion_factor_imperial;
		// Put this new value_metric in the metric_textField
		metric_textField.setText(" " + value_metric);
			}
	// Method to initialize the controls based on the selection of the conversion type 
	private void initializeControlValues(){
		// Make an Object array to store all the keys of the LinkedHashMap
	Object[] keys = this.conversion_map.keySet().toArray();

		// Initialization for the controls if the conversion_type_combobox is set to Length
		if(conversion_type_comboBox.getValue()=="Length"){

			//Initialize length to 1.0
			imperial_textField.setText(""+ 1.0);
			// Set slider scale 0 to 6, set slider value to 4 and ticks to 1 unit intervals
			accuracy_slider.setValue(4);
			accuracy_slider.setMax(6);
			accuracy_slider.setMajorTickUnit(1);
			accuracy_textField.setText(""+ 4.0);
			// Initialize the radio
			imperial_radioButton_1.setText((String)keys[0]);
			imperial_radioButton_2.setText((String)keys[1]);
			imperial_radioButton_3.setText((String)keys[2]);
			metric_radioButton_1.setText((String)keys[3]);
			metric_radioButton_2.setText((String)keys[4]);
			metric_radioButton_3.setText((String)keys[5]);					
			// Set default selections for the radio buttons
			imperial_radioButton_1.setSelected(true);
			metric_radioButton_1.setSelected(true);

		}
		// Initialization for the controls if the conversion_type_combobox is set to Mass
		else if(conversion_type_comboBox.getValue()=="Mass"){
			// Initialize the mass to .5
			imperial_textField.setText(""+ 0.5);
			// Set slider scale 0 to 5, set slider value to 3 and ticks to 1 unit intervals
			accuracy_slider.setValue(3);
			accuracy_slider.setMax(5);
			accuracy_slider.setMajorTickUnit(1);
			accuracy_textField.setText(""+ 3.0);
			// Initialize the radio buttons
			imperial_radioButton_1.setText((String)keys[6]);
			imperial_radioButton_2.setText((String)keys[7]);
			imperial_radioButton_3.setText((String)keys[8]);
			metric_radioButton_1.setText((String)keys[9]);
			metric_radioButton_2.setText((String)keys[10]);
			metric_radioButton_3.setText((String)keys[11]);
			// Set default selections for the radio buttons
			imperial_radioButton_2.setSelected(true);
			metric_radioButton_2.setSelected(true);
		}
		// Slider display ticks etc
		accuracy_slider.setShowTickMarks(true);
		accuracy_slider.setShowTickLabels(true);
		accuracy_slider.setBlockIncrement(1);
	}

	// Variable declaration. Although it is not correct to do so you may choose to initalize 
	// variable here also to avoid a very large init() method
	
	//layout
	private GridPane gridPane;
	//imperial
	private Label imperial_label;
	private TextField imperial_textField;
	private ToggleGroup imperial_toggleGroup;
	private RadioButton imperial_radioButton_1;
	private RadioButton imperial_radioButton_2;
	private RadioButton imperial_radioButton_3 ;
	// Metric
	private Label metric_label;
	private TextField metric_textField ;
	private ToggleGroup metric_toggleGroup;
	private RadioButton metric_radioButton_1;
	private RadioButton metric_radioButton_2;
	private RadioButton metric_radioButton_3;
	//Accuracy
	private Label accuracy_label;
	private Slider accuracy_slider;
	private TextField accuracy_textField;
	//Calculate and Erase
	private Button convert_button;
	private Button reset_button;
	// Conversion Type
	private Label conversion_type_label;
	private ComboBox<String> conversion_type_comboBox;
	// Conversion Map - facilitates the conversion from imperial to metric. 
	// This LinkedHashMap initialization is complete
	private Map<String,Double> conversion_map = new LinkedHashMap<String, Double>();
	{ 
		conversion_map.put("in",0.0254); // key:in value:the factor required to convert inches to metres
		conversion_map.put("foot",0.3048);
		conversion_map.put("yard",0.9144);
		conversion_map.put("mm",1000.0); // key:mm value:the factor required to then convert metres to mm
		conversion_map.put("cm",100.0);
		conversion_map.put("m",1.0);
		conversion_map.put("oz",0.0283);
		conversion_map.put("lb",0.453);
		conversion_map.put("stone",6.35);
		conversion_map.put("g",1000.0);
		conversion_map.put("kg",1.0);
		conversion_map.put("ton",0.001);
	}
}
